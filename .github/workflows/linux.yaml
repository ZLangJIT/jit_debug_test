# Job execution time - Each job in a workflow can run for up to 6 hours of execution time.
# Workflow run time - Each workflow run is limited to 35 days

name: linux

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

defaults:
  run:
    shell: alpine.sh {0}

jobs:
  should_run:
    if: true
    runs-on: ubuntu-latest
    name: should_i_run
    outputs:
      output1: ${{ steps.check.outputs.target_commit_id }}
    steps:
     - name: check
       shell: bash
       run: |
         wget https://gist.github.com/mgood7123/47957c59a4b0cbda11875632ee0b8f15/raw/7e876a60f2735cf7e60150a9a29edf6ddaad20a8/check.cpp -O check.cpp
         cat << EOF > data.json
         ${{toJSON(github.event.commits.*)}}
         EOF
         cat -n data.json
         git clone https://github.com/danielaparker/jsoncons --depth=1
         g++ --std=c++17 -I jsoncons/include check.cpp -o check
         ./check 3 >> "$GITHUB_OUTPUT" # check for android [1] windows [2] linux [3] macos [4]
  
  test:
    needs: should_run
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux

    runs-on: ${{ matrix.os }}

    name: deps - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive
          
      - name: Setup latest Alpine Linux
        uses: jirutka/setup-alpine@v1
        with:
          shell-name: alpine.sh
          packages: sudo
          
      - name: install llvm
        run: |
          whoami
          sudo whoami
          sudo apk update
          sudo apk upgrade
          sudo apk add lldb lldb-dev clang18 clang18-dev clang18-static llvm18 llvm18-dev llvm18-static cmake make
          
      - name: list libs
        run: |
          set -v
          ls /lib
          ls /usr/lib
          
      - name: cmake build - Debug - Generate
        run: |
          mkdir BUILD_DEBUG
          mkdir ROOTFS_DEBUG
          cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=ROOTFS_DEBUG -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=clang-18 -DCMAKE_CXX_COMPILER=clang++-18 -DCMAKE_C_FLAGS="-g3 -O0" -DCMAKE_CXX_FLAGS="-g3 -O0" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -S . -B BUILD_DEBUG

      - name: cmake build - Debug - Build
        run: |
          cmake --build BUILD_DEBUG

      - name: cmake build - Debug - Install
        run: |
          cmake --install BUILD_DEBUG
