# Job execution time - Each job in a workflow can run for up to 6 hours of execution time.
# Workflow run time - Each workflow run is limited to 35 days

name: windows

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

defaults:
  run:
    shell: bash
    
jobs:
  should_run:
    if: true
    runs-on: ubuntu-latest
    name: should_i_run
    outputs:
      output1: ${{ steps.check.outputs.target_commit_id }}
    steps:
     - name: check
       shell: bash
       run: |
         wget https://gist.github.com/mgood7123/47957c59a4b0cbda11875632ee0b8f15/raw/7e876a60f2735cf7e60150a9a29edf6ddaad20a8/check.cpp -O check.cpp
         cat << EOF > data.json
         ${{toJSON(github.event.commits.*)}}
         EOF
         cat -n data.json
         git clone https://github.com/danielaparker/jsoncons --depth=1
         g++ --std=c++17 -I jsoncons/include check.cpp -o check
         ./check 2 >> "$GITHUB_OUTPUT" # check for android [1] windows [2] linux [3] macos [4]

  build_split:
    needs: should_run
    if: false
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows

    runs-on: ${{ matrix.os }}

    name: split - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive
          
      - name: check if split program is cached
        run: |
          git clone --recursive https://github.com/ZLangJIT/split
          cd split
          chmod +x ../try_get_release.sh
          bash -c "../try_get_release.sh   ZLangJIT   jit_debug_test   storage--split--windows   split_build.tar || true"

      - name: build split program
        run: |
          cd split
          chmod +x make.sh
          ./make.sh

      - name: archive split build directory
        run: |
          cd split
          # we need only the rootfs in the next stage
          mv BUILD_DEBUG/BUILD_ROOT/ROOTFS .
          tar -cf split_build.tar BUILD_DEBUG
          sha512sum split_build.tar > split_build.tar.sha512
          rm -rf BUILD_DEBUG
          # preserve the directory structure
          mkdir BUILD_DEBUG
          mkdir BUILD_DEBUG/BUILD_ROOT
          mv ROOTFS BUILD_DEBUG/BUILD_ROOT
          tar -cf split_rootfs.tar BUILD_DEBUG
          sha512sum split_rootfs.tar > split_rootfs.tar.sha512
          cd ..
          mkdir split_exe
          cp split/BUILD_DEBUG/BUILD_ROOT/ROOTFS/bin/split.exe split_exe
          tar -cf split.exe.tar split_exe
          sha512sum split.exe.tar > split.exe.tar.sha512
          rm -rf split/BUILD_DEBUG
          rm -rf split_exe
          tar -xf split.exe.tar
          echo "checking if packaged split.exe works"
          ./split_exe/split.exe
          echo "packaged split.exe works"

      - name: list files
        run: |
          ls -l
      
      - name: upload split build directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "split"
          tag: "storage--split--windows"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./split/split_build.tar
            ./split/split_build.tar.sha512
            ./split/split_rootfs.tar
            ./split/split_rootfs.tar.sha512
            ./split.exe.tar
            ./split.exe.tar.sha512

  test:
    needs: should_run
    #needs: build_split
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows

    runs-on: ${{ matrix.os }}

    name: test - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: download llvm
        run: |
          curl -L "https://github.com/llvm/llvm-project/releases/download/llvmorg-18.1.8/clang+llvm-18.1.8-x86_64-pc-windows-msvc.tar.xz" -O

      - name: extract llvm
        run: |
          tar -xf clang+llvm-18.1.8-x86_64-pc-windows-msvc.tar.xz
          mv clang+llvm-18.1.8-x86_64-pc-windows-msvc llvm-18

      - name: list files llvm
        run: |
          ls -l
          find .

      - name: check if split program is cached
        run: |
          chmod +x ./try_get_release.sh
          bash -c "./try_get_release.sh   ZLangJIT   jit_debug_test   storage--split--windows   split.exe.tar || true"
          
      - name: cmake build - Debug - Generate
        run: |
          mkdir BUILD_DEBUG
          mkdir ROOTFS_DEBUG
          export PATH="$(pwd)/llvm-18/bin:$PATH"
          cmake -DCMAKE_PREFIX_PATH="$(pwd)/llvm-18/lib/cmake" -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=ROOTFS_DEBUG -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_FLAGS="-g3 -O0" -DCMAKE_CXX_FLAGS="-g3 -O0" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -S . -B BUILD_DEBUG

      - name: cmake build - Debug - Build
        run: |
          export PATH="$(pwd)/llvm-18/bin:$PATH"
          cmake --build BUILD_DEBUG

      - name: cmake build - Debug - Install
        run: |
          export PATH="$(pwd)/llvm-18/bin:$PATH"
          cmake --install BUILD_DEBUG
          find ROOTFS_DEBUG
          ls -l ROOTFS_DEBUG
          ls -lh ROOTFS_DEBUG
          ls -l ROOTFS_DEBUG/bin
          ls -lh ROOTFS_DEBUG/bin
          
      - name: test
        run: |
          export PATH="$(pwd)/llvm-18/bin:$PATH"
          ./ROOTFS_DEBUG/bin/jit
          lldb ROOTFS_DEBUG/bin/jit -s j.lldb --source-on-crash j.lldberr
          
      - name: archive rootfs
        run: |
          # 500 mb
          #
          ./split_exe/split --split -r ROOTFS_DEBUG --name ROOTFS_DEBUG --size $((1024*1024*500))

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l

      - name: upload rootfs
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "alpine - jit test - Debug"
          tag: "storage--alpine-jit_test--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./ROOTFS_DEBUG.split.*
